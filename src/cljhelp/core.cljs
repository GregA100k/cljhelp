(ns cljhelp.core
  (:require [clojure.browser.dom :as dom]
 ))

(defn paste-value
 " help from https://gist.github.com/kohyama/6192253"
  [t]
  (let [spot (dom/get-element "spot")
        el (dom/element "textarea" {:cols 50 :rows 10})
        highlighted-value t
        message (str t " is not in the list of functions")
        set-the-value (dom/set-text el message)
       ]
        (dom/append spot el)
    ))

(defn redirect-to-cheatsheet [url] 
  (let [spot (dom/get-element "spot")
        ifr (dom/element "iframe" {:width "100%" :height "400px" :frameborder "0"})
        set-the-url (set! (.-src ifr) url)
       ]
    (dom/append spot ifr)
  ))

(def function-map {"butlast"  "https://clojuredocs.org/clojure_core/clojure.core/butlast"
"with-in-str"  "https://clojuredocs.org/clojure_core/clojure.core/with-in-str"
"*compile-path*"  "https://clojuredocs.org/clojure_core/clojure.core/*compile-path*"
"float"  "https://clojuredocs.org/clojure_core/clojure.core/float"
"*print-level*"  "https://clojuredocs.org/clojure_core/clojure.core/*print-level*"
"re-pattern"  "https://clojuredocs.org/clojure_core/clojure.core/re-pattern"
"future?"  "https://clojuredocs.org/clojure_core/clojure.core/future_q"
"pprint"  "https://clojuredocs.org/clojure_core/clojure.pprint/pprint"
"partial"  "https://clojuredocs.org/clojure_core/clojure.core/partial"
"boolean-array"  "https://clojuredocs.org/clojure_core/clojure.core/boolean-array"
"boolean"  "https://clojuredocs.org/clojure_core/clojure.core/boolean"
"remove-method"  "https://clojuredocs.org/clojure_core/clojure.core/remove-method"
"sorted-set"  "https://github.com/clojure/data.avl"
"drop-last"  "https://clojuredocs.org/clojure_core/clojure.core/drop-last"
"load-reader"  "https://clojuredocs.org/clojure_core/clojure.core/load-reader"
"unchecked-negate"  "https://clojuredocs.org/clojure_core/clojure.core/unchecked-negate"
"split-lines"  "https://clojuredocs.org/clojure_core/clojure.string/split-lines"
"map"  "https://clojuredocs.org/clojure_core/clojure.core/map"
"select-keys"  "https://clojuredocs.org/clojure_core/clojure.core/select-keys"
"zipmap"  "https://clojuredocs.org/clojure_core/clojure.core/zipmap"
"rseq"  "https://clojuredocs.org/clojure_core/clojure.core/rseq"
"compare"  "https://clojuredocs.org/clojure_core/clojure.core/compare"
"split-with"  "https://clojuredocs.org/clojure_core/clojure.core/split-with"
"binding"  "https://clojuredocs.org/clojure_core/clojure.core/binding"
"int"  "https://clojuredocs.org/clojure_core/clojure.core/int"
"seq"  "https://clojuredocs.org/clojure_core/clojure.core/seq"
"amap"  "https://clojuredocs.org/clojure_core/clojure.core/amap"
"push-thread-bindings"  "https://clojuredocs.org/clojure_core/clojure.core/push-thread-bindings"
"insert-right"  "https://clojuredocs.org/clojure_core/clojure.zip/insert-right"
"ancestors"  "https://clojuredocs.org/clojure_core/clojure.core/ancestors"
"object-array"  "https://clojuredocs.org/clojure_core/clojure.core/object-array"
"shorts"  "https://clojuredocs.org/clojure_core/clojure.core/shorts"
"cond->"  "https://clojuredocs.org/clojure_core/clojure.core/cond->"
"rename-keys"  "https://clojuredocs.org/clojure_core/clojure.set/rename-keys"
"resource"  "https://clojuredocs.org/clojure_core/clojure.java.io/resource"
"range"  "https://clojuredocs.org/clojure_core/clojure.core/range"
"not-every?"  "https://clojuredocs.org/clojure_core/clojure.core/not-every_q"
"drop-while"  "https://clojuredocs.org/clojure_core/clojure.core/drop-while"
"monitor-enter"  "https://clojuredocs.org/clojure_core/clojure.core/monitor-enter"
"peek"  "https://clojuredocs.org/clojure_core/clojure.core/peek"
"subs"  "https://clojuredocs.org/clojure_core/clojure.core/subs"
"take-nth"  "https://clojuredocs.org/clojure_core/clojure.core/take-nth"
"+'"  "https://clojuredocs.org/clojure_core/clojure.core/+'"
"ns-name"  "https://clojuredocs.org/clojure_core/clojure.core/ns-name"
"*e"  "https://clojuredocs.org/clojure_core/clojure.core/*e"
"prn-str"  "https://clojuredocs.org/clojure_core/clojure.core/prn-str"
"nthrest"  "https://clojuredocs.org/clojure_core/clojure.core/nthrest"
"promise"  "https://clojuredocs.org/clojure_core/clojure.core/promise"
"satisfies?"  "https://clojuredocs.org/clojure_core/clojure.core/satisfies_q"
"vec"  "https://clojuredocs.org/clojure_core/clojure.core/vec"
"as->"  "https://clojuredocs.org/clojure_core/clojure.core/as->"
"proxy-super"  "https://clojuredocs.org/clojure_core/clojure.core/proxy-super"
"seque"  "https://clojuredocs.org/clojure_core/clojure.core/seque"
"integer?"  "https://clojuredocs.org/clojure_core/clojure.core/integer_q"
"with-local-vars"  "https://clojuredocs.org/clojure_core/clojure.core/with-local-vars"
"*print-dup*"  "https://clojuredocs.org/clojure_core/clojure.core/*print-dup*"
"loop"  "https://clojuredocs.org/clojure_core/clojure.core/loop"
"zipper"  "https://clojuredocs.org/clojure_core/clojure.zip/zipper"
"min"  "https://clojuredocs.org/clojure_core/clojure.core/min"
"leftmost"  "https://clojuredocs.org/clojure_core/clojure.zip/leftmost"
"trim"  "https://clojuredocs.org/clojure_core/clojure.string/trim"
"bit-flip"  "https://clojuredocs.org/clojure_core/clojure.core/bit-flip"
"set-agent-send-off-executor!"  "https://clojuredocs.org/clojure_core/clojure.core/set-agent-send-off-executor!"
"defn"  "https://clojuredocs.org/clojure_core/clojure.core/defn"
"isa?"  "https://clojuredocs.org/clojure_core/clojure.core/isa_q"
"rename"  "https://clojuredocs.org/clojure_core/clojure.set/rename"
"printf"  "https://clojuredocs.org/clojure_core/clojure.core/printf"
"rational?"  "https://clojuredocs.org/clojure_core/clojure.core/rational_q"
"max-key"  "https://clojuredocs.org/clojure_core/clojure.core/max-key"
"extenders"  "https://clojuredocs.org/clojure_core/clojure.core/extenders"
"="  "https://clojuredocs.org/clojure_core/clojure.core/="
"list"  "https://clojuredocs.org/clojure_core/clojure.core/list"
"starts-with?"  "https://clojuredocs.org/clojure_core/clojure.string/starts-with_q"
"constantly"  "https://clojuredocs.org/clojure_core/clojure.core/constantly"
"into-array"  "https://clojuredocs.org/clojure_core/clojure.core/into-array"
"*print-readably*"  "https://clojuredocs.org/clojure_core/clojure.core/*print-readably*"
"*warn-on-reflection*"  "https://clojuredocs.org/clojure_core/clojure.core/*warn-on-reflection*"
"right"  "https://clojuredocs.org/clojure_core/clojure.zip/right"
"agent"  "https://clojuredocs.org/clojure_core/clojure.core/agent"
"file-seq"  "https://clojuredocs.org/clojure_core/clojure.core/file-seq"
"fnil"  "https://clojuredocs.org/clojure_core/clojure.core/fnil"
"random-sample"  "https://clojuredocs.org/clojure_core/clojure.core/random-sample"
"*"  "https://clojuredocs.org/clojure_core/clojure.core/*"
"next"  "https://clojuredocs.org/clojure_core/clojure.zip/next"
"bit-test"  "https://clojuredocs.org/clojure_core/clojure.core/bit-test"
"transduce"  "https://clojuredocs.org/clojure_core/clojure.core/transduce"
"input-stream"  "https://clojuredocs.org/clojure_core/clojure.java.io/input-stream"
"keys"  "https://clojuredocs.org/clojure_core/clojure.core/keys"
"pcalls"  "https://clojuredocs.org/clojure_core/clojure.core/pcalls"
"subvec"  "https://clojuredocs.org/clojure_core/clojure.core/subvec"
"resolve"  "https://clojuredocs.org/clojure_core/clojure.core/resolve"
"contains?"  "https://clojuredocs.org/clojure_core/clojure.core/contains_q"
"char-escape-string"  "https://clojuredocs.org/clojure_core/clojure.core/char-escape-string"
"<="  "https://clojuredocs.org/clojure_core/clojure.core/<="
"future-call"  "https://clojuredocs.org/clojure_core/clojure.core/future-call"
"some->"  "https://clojuredocs.org/clojure_core/clojure.core/some->"
"if-not"  "https://clojuredocs.org/clojure_core/clojure.core/if-not"
"sorted-map-by"  "https://github.com/clojure/data.avl"
"cast"  "https://clojuredocs.org/clojure_core/clojure.core/cast"
"await"  "https://clojuredocs.org/clojure_core/clojure.core/await"
"keep"  "https://clojuredocs.org/clojure_core/clojure.core/keep"
"unchecked-subtract"  "https://clojuredocs.org/clojure_core/clojure.core/unchecked-subtract"
"declare"  "https://clojuredocs.org/clojure_core/clojure.core/declare"
"when-first"  "https://clojuredocs.org/clojure_core/clojure.core/when-first"
"index"  "https://clojuredocs.org/clojure_core/clojure.set/index"
"int-set"  "https://github.com/clojure/data.int-map"
"nthnext"  "https://clojuredocs.org/clojure_core/clojure.core/nthnext"
"to-array-2d"  "https://clojuredocs.org/clojure_core/clojure.core/to-array-2d"
"up"  "https://clojuredocs.org/clojure_core/clojure.zip/up"
"disj!"  "https://clojuredocs.org/clojure_core/clojure.core/disj!"
"ref-max-history"  "https://clojuredocs.org/clojure_core/clojure.core/ref-max-history"
"ns-imports"  "https://clojuredocs.org/clojure_core/clojure.core/ns-imports"
"*default-data-reader-fn*"  "https://clojuredocs.org/clojure_core/clojure.core/*default-data-reader-fn*"
"aget"  "https://clojuredocs.org/clojure_core/clojure.core/aget"
"copy"  "https://clojuredocs.org/clojure_core/clojure.java.io/copy"
"find"  "https://clojuredocs.org/clojure_core/clojure.core/find"
"*in*"  "https://clojuredocs.org/clojure_core/clojure.core/*in*"
"delete-file"  "https://clojuredocs.org/clojure_core/clojure.java.io/delete-file"
"create-ns"  "https://clojuredocs.org/clojure_core/clojure.core/create-ns"
"number?"  "https://clojuredocs.org/clojure_core/clojure.core/number_q"
"*data-readers*"  "https://clojuredocs.org/clojure_core/clojure.core/*data-readers*"
"reader"  "https://clojuredocs.org/clojure_core/clojure.java.io/reader"
"bigdec"  "https://clojuredocs.org/clojure_core/clojure.core/bigdec"
"booleans"  "https://clojuredocs.org/clojure_core/clojure.core/booleans"
"dissoc"  "https://clojuredocs.org/clojure_core/clojure.core/dissoc"
"dosync"  "https://clojuredocs.org/clojure_core/clojure.core/dosync"
"gensym"  "https://clojuredocs.org/clojure_core/clojure.core/gensym"
"find-keyword"  "https://clojuredocs.org/clojure_core/clojure.core/find-keyword"
"as-file"  "https://clojuredocs.org/clojure_core/clojure.java.io/as-file"
"assoc!"  "https://clojuredocs.org/clojure_core/clojure.core/assoc!"
"when-some"  "https://clojuredocs.org/clojure_core/clojure.core/when-some"
"vector?"  "https://clojuredocs.org/clojure_core/clojure.core/vector_q"
"remove-watch"  "https://clojuredocs.org/clojure_core/clojure.core/remove-watch"
"bit-or"  "https://clojuredocs.org/clojure_core/clojure.core/bit-or"
"reduced"  "https://clojuredocs.org/clojure_core/clojure.core/reduced"
"*print-meta*"  "https://clojuredocs.org/clojure_core/clojure.core/*print-meta*"
"not"  "https://clojuredocs.org/clojure_core/clojure.core/not"
"longs"  "https://clojuredocs.org/clojure_core/clojure.core/longs"
"newline"  "https://clojuredocs.org/clojure_core/clojure.core/newline"
"reductions"  "https://clojuredocs.org/clojure_core/clojure.core/reductions"
"append-child"  "https://clojuredocs.org/clojure_core/clojure.zip/append-child"
"doall"  "https://clojuredocs.org/clojure_core/clojure.core/doall"
"if-let"  "https://clojuredocs.org/clojure_core/clojure.core/if-let"
"pop!"  "https://clojuredocs.org/clojure_core/clojure.core/pop!"
"unchecked-add"  "https://clojuredocs.org/clojure_core/clojure.core/unchecked-add"
"pmap"  "https://clojuredocs.org/clojure_core/clojure.core/pmap"
"run!"  "https://clojuredocs.org/clojure_core/clojure.core/run!"
"class"  "https://clojuredocs.org/clojure_core/clojure.core/class"
"doseq"  "https://clojuredocs.org/clojure_core/clojure.core/doseq"
"sequential?"  "https://clojuredocs.org/clojure_core/clojure.core/sequential_q"
"superset?"  "https://clojuredocs.org/clojure_core/clojure.set/superset_q"
"get-validator"  "https://clojuredocs.org/clojure_core/clojure.core/get-validator"
"clojure-version"  "https://clojuredocs.org/clojure_core/clojure.core/clojure-version"
"long-array"  "https://clojuredocs.org/clojure_core/clojure.core/long-array"
"some-fn"  "https://clojuredocs.org/clojure_core/clojure.core/some-fn"
"update-in"  "https://clojuredocs.org/clojure_core/clojure.core/update-in"
"var"  "https://clojuredocs.org/clojure_core/clojure.core/var"
"send"  "https://clojuredocs.org/clojure_core/clojure.core/send"
"hash-map"  "https://clojuredocs.org/clojure_core/clojure.core/hash-map"
"load"  "https://clojuredocs.org/clojure_core/clojure.core/load"
"try"  "https://clojuredocs.org/clojure_core/clojure.core/try"
"aset-byte"  "https://clojuredocs.org/clojure_core/clojure.core/aset-byte"
"/"  "https://clojuredocs.org/clojure_core/clojure.core/_fs"
"str"  "https://clojuredocs.org/clojure_core/clojure.core/str"
"pop"  "https://clojuredocs.org/clojure_core/clojure.core/pop"
"long"  "https://clojuredocs.org/clojure_core/clojure.core/long"
"reverse"  "https://clojuredocs.org/clojure_core/clojure.core/reverse"
"update-proxy"  "https://clojuredocs.org/clojure_core/clojure.core/update-proxy"
"vswap!"  "https://clojuredocs.org/clojure_core/clojure.core/vswap!"
"rand"  "https://clojuredocs.org/clojure_core/clojure.core/rand"
"conj!"  "https://clojuredocs.org/clojure_core/clojure.core/conj!"
"trampoline"  "https://clojuredocs.org/clojure_core/clojure.core/trampoline"
"hash"  "https://clojuredocs.org/clojure_core/clojure.core/hash"
".."  "https://clojuredocs.org/clojure_core/clojure.core/_dot_dot"
"chars"  "https://clojuredocs.org/clojure_core/clojure.core/chars"
"bound-fn"  "https://clojuredocs.org/clojure_core/clojure.core/bound-fn"
"default-data-readers"  "https://clojuredocs.org/clojure_core/clojure.core/default-data-readers"
"every?"  "https://clojuredocs.org/clojure_core/clojure.core/every_q"
"read-string"  "https://github.com/clojure/tools.reader"
"the-ns"  "https://clojuredocs.org/clojure_core/clojure.core/the-ns"
"ns-publics"  "https://clojuredocs.org/clojure_core/clojure.core/ns-publics"
"with-redefs"  "https://clojuredocs.org/clojure_core/clojure.core/with-redefs"
"iterator-seq"  "https://clojuredocs.org/clojure_core/clojure.core/iterator-seq"
"-"  "https://clojuredocs.org/clojure_core/clojure.core/-"
"descendants"  "https://clojuredocs.org/clojure_core/clojure.core/descendants"
"key"  "https://clojuredocs.org/clojure_core/clojure.core/key"
"repeat"  "https://clojuredocs.org/clojure_core/clojure.core/repeat"
"refer"  "https://clojuredocs.org/clojure_core/clojure.core/refer"
"dissoc!"  "https://clojuredocs.org/clojure_core/clojure.core/dissoc!"
"supers"  "https://clojuredocs.org/clojure_core/clojure.core/supers"
"children"  "https://clojuredocs.org/clojure_core/clojure.zip/children"
"methods"  "https://clojuredocs.org/clojure_core/clojure.core/methods"
"find-var"  "https://clojuredocs.org/clojure_core/clojure.core/find-var"
"project"  "https://clojuredocs.org/clojure_core/clojure.set/project"
"dedupe"  "https://clojuredocs.org/clojure_core/clojure.core/dedupe"
"definline"  "https://clojuredocs.org/clojure_core/clojure.core/definline"
"vary-meta"  "https://clojuredocs.org/clojure_core/clojure.core/vary-meta"
"true?"  "https://clojuredocs.org/clojure_core/clojure.core/true_q"
"second"  "https://clojuredocs.org/clojure_core/clojure.core/second"
"re-quote-replacement"  "https://clojuredocs.org/clojure_core/clojure.string/re-quote-replacement"
"iterate"  "https://clojuredocs.org/clojure_core/clojure.core/iterate"
"find-doc"  "https://clojuredocs.org/clojure_core/clojure.repl/find-doc"
"force"  "https://clojuredocs.org/clojure_core/clojure.core/force"
"lower-case"  "https://clojuredocs.org/clojure_core/clojure.string/lower-case"
"replace-first"  "https://clojuredocs.org/clojure_core/clojure.string/replace-first"
"union"  "https://clojuredocs.org/clojure_core/clojure.set/union"
"persistent!"  "https://clojuredocs.org/clojure_core/clojure.core/persistent!"
"false?"  "https://clojuredocs.org/clojure_core/clojure.core/false_q"
"max"  "https://clojuredocs.org/clojure_core/clojure.core/max"
"path"  "https://clojuredocs.org/clojure_core/clojure.zip/path"
"vector-of"  "https://github.com/clojure/core.rrb-vector"
"send-off"  "https://clojuredocs.org/clojure_core/clojure.core/send-off"
"with-sh-env"  "https://clojuredocs.org/clojure_core/clojure.java.shell/with-sh-env"
"cycle"  "https://clojuredocs.org/clojure_core/clojure.core/cycle"
"output-stream"  "https://clojuredocs.org/clojure_core/clojure.java.io/output-stream"
"lazy-cat"  "https://clojuredocs.org/clojure_core/clojure.core/lazy-cat"
"get-in"  "https://clojuredocs.org/clojure_core/clojure.core/get-in"
"new"  "https://clojuredocs.org/clojure_core/clojure.core/new"
"seq-zip"  "https://clojuredocs.org/clojure_core/clojure.zip/seq-zip"
"float-array"  "https://clojuredocs.org/clojure_core/clojure.core/float-array"
"nth"  "https://clojuredocs.org/clojure_core/clojure.core/nth"
"ensure"  "https://clojuredocs.org/clojure_core/clojure.core/ensure"
"map-invert"  "https://clojuredocs.org/clojure_core/clojure.set/map-invert"
"require"  "https://clojuredocs.org/clojure_core/clojure.core/require"
"*'"  "https://clojuredocs.org/clojure_core/clojure.core/*'"
"remove-ns"  "https://clojuredocs.org/clojure_core/clojure.core/remove-ns"
"compare-and-set!"  "https://clojuredocs.org/clojure_core/clojure.core/compare-and-set!"
"set!"  "https://clojuredocs.org/clojure_core/clojure.core/set!"
"comp"  "https://clojuredocs.org/clojure_core/clojure.core/comp"
"partition"  "https://clojuredocs.org/clojure_core/clojure.core/partition"
"fn"  "https://clojuredocs.org/clojure_core/clojure.core/fn"
"flush"  "https://clojuredocs.org/clojure_core/clojure.core/flush"
"inc'"  "https://clojuredocs.org/clojure_core/clojure.core/inc'"
"println-str"  "https://clojuredocs.org/clojure_core/clojure.core/println-str"
"for"  "https://clojuredocs.org/clojure_core/clojure.core/for"
"shuffle"  "https://clojuredocs.org/clojure_core/clojure.core/shuffle"
"bit-xor"  "https://clojuredocs.org/clojure_core/clojure.core/bit-xor"
"defrecord"  "https://clojuredocs.org/clojure_core/clojure.core/defrecord"
"-'"  "https://clojuredocs.org/clojure_core/clojure.core/-'"
"read"  "https://github.com/clojure/tools.reader"
"*out*"  "https://clojuredocs.org/clojure_core/clojure.core/*out*"
"eduction"  "https://clojuredocs.org/clojure_core/clojure.core/eduction"
"last-index-of"  "https://clojuredocs.org/clojure_core/clojure.string/last-index-of"
"root"  "https://clojuredocs.org/clojure_core/clojure.zip/root"
"with-meta"  "https://clojuredocs.org/clojure_core/clojure.core/with-meta"
"catch"  "https://clojuredocs.org/clojure_core/clojure.core/catch"
"xml-seq"  "https://clojuredocs.org/clojure_core/clojure.core/xml-seq"
"aclone"  "https://clojuredocs.org/clojure_core/clojure.core/aclone"
"take"  "https://clojuredocs.org/clojure_core/clojure.core/take"
"dense-int-set"  "https://github.com/clojure/data.int-map"
"pop-thread-bindings"  "https://clojuredocs.org/clojure_core/clojure.core/pop-thread-bindings"
"pvalues"  "https://clojuredocs.org/clojure_core/clojure.core/pvalues"
"rest"  "https://clojuredocs.org/clojure_core/clojure.core/rest"
"identical?"  "https://clojuredocs.org/clojure_core/clojure.core/identical_q"
"volatile?"  "https://clojuredocs.org/clojure_core/clojure.core/volatile_q"
"reduce-kv"  "https://clojuredocs.org/clojure_core/clojure.core/reduce-kv"
"with-redefs-fn"  "https://clojuredocs.org/clojure_core/clojure.core/with-redefs-fn"
"merge-with"  "https://clojuredocs.org/clojure_core/clojure.core/merge-with"
"count"  "https://clojuredocs.org/clojure_core/clojure.core/count"
"update"  "https://clojuredocs.org/clojure_core/clojure.core/update"
"alter"  "https://clojuredocs.org/clojure_core/clojure.core/alter"
"derive"  "https://clojuredocs.org/clojure_core/clojure.core/derive"
"gen-interface"  "https://clojuredocs.org/clojure_core/clojure.core/gen-interface"
"dorun"  "https://clojuredocs.org/clojure_core/clojure.core/dorun"
"ordered-set"  "https://github.com/amalloy/ordered"
"ns-resolve"  "https://clojuredocs.org/clojure_core/clojure.core/ns-resolve"
"empty?"  "https://clojuredocs.org/clojure_core/clojure.core/empty_q"
"short"  "https://clojuredocs.org/clojure_core/clojure.core/short"
"to-array"  "https://clojuredocs.org/clojure_core/clojure.core/to-array"
"aset-float"  "https://clojuredocs.org/clojure_core/clojure.core/aset-float"
"cons"  "https://clojuredocs.org/clojure_core/clojure.core/cons"
"swap!"  "https://clojuredocs.org/clojure_core/clojure.core/swap!"
"rand-int"  "https://clojuredocs.org/clojure_core/clojure.core/rand-int"
"set-error-handler!"  "https://clojuredocs.org/clojure_core/clojure.core/set-error-handler!"
"as-url"  "https://clojuredocs.org/clojure_core/clojure.java.io/as-url"
"sort"  "https://clojuredocs.org/clojure_core/clojure.core/sort"
"re-seq"  "https://clojuredocs.org/clojure_core/clojure.core/re-seq"
"re-find"  "https://clojuredocs.org/clojure_core/clojure.core/re-find"
"not-any?"  "https://clojuredocs.org/clojure_core/clojure.core/not-any_q"
"apply"  "https://clojuredocs.org/clojure_core/clojure.core/apply"
"frequencies"  "https://clojuredocs.org/clojure_core/clojure.core/frequencies"
"memfn"  "https://clojuredocs.org/clojure_core/clojure.core/memfn"
"ifn?"  "https://clojuredocs.org/clojure_core/clojure.core/ifn_q"
"*command-line-args*"  "https://clojuredocs.org/clojure_core/clojure.core/*command-line-args*"
"partition-by"  "https://clojuredocs.org/clojure_core/clojure.core/partition-by"
"some?"  "https://clojuredocs.org/clojure_core/clojure.core/some_q"
"rem"  "https://clojuredocs.org/clojure_core/clojure.core/rem"
"alter-var-root"  "https://clojuredocs.org/clojure_core/clojure.core/alter-var-root"
"areduce"  "https://clojuredocs.org/clojure_core/clojure.core/areduce"
"transient"  "https://clojuredocs.org/clojure_core/clojure.core/transient"
"*1"  "https://clojuredocs.org/clojure_core/clojure.core/*1"
"sorted-map"  "https://github.com/clojure/data.avl"
"clojure.xml/parse"  "https://clojuredocs.org/clojure_core/clojure.xml/parse"
"resultset-seq"  "https://clojuredocs.org/clojure_core/clojure.core/resultset-seq"
"*clojure-version*"  "https://clojuredocs.org/clojure_core/clojure.core/*clojure-version*"
"subset?"  "https://clojuredocs.org/clojure_core/clojure.set/subset_q"
"escape"  "https://clojuredocs.org/clojure_core/clojure.string/escape"
"completing"  "https://clojuredocs.org/clojure_core/clojure.core/completing"
"distinct"  "https://clojuredocs.org/clojure_core/clojure.core/distinct"
"error-handler"  "https://clojuredocs.org/clojure_core/clojure.core/error-handler"
"ends-with?"  "https://clojuredocs.org/clojure_core/clojure.string/ends-with_q"
"in-ns"  "https://clojuredocs.org/clojure_core/clojure.core/in-ns"
"parents"  "https://clojuredocs.org/clojure_core/clojure.core/parents"
"bit-and"  "https://clojuredocs.org/clojure_core/clojure.core/bit-and"
"bases"  "https://clojuredocs.org/clojure_core/clojure.core/bases"
"name"  "https://clojuredocs.org/clojure_core/clojure.core/name"
"nil?"  "https://clojuredocs.org/clojure_core/clojure.core/nil_q"
"byte-array"  "https://clojuredocs.org/clojure_core/clojure.core/byte-array"
"record?"  "https://clojuredocs.org/clojure_core/clojure.core/record_q"
"re-groups"  "https://clojuredocs.org/clojure_core/clojure.core/re-groups"
"underive"  "https://clojuredocs.org/clojure_core/clojure.core/underive"
"unchecked-dec"  "https://clojuredocs.org/clojure_core/clojure.core/unchecked-dec"
"bit-and-not"  "https://clojuredocs.org/clojure_core/clojure.core/bit-and-not"
"pst"  "https://clojuredocs.org/clojure_core/clojure.repl/pst"
"index-of"  "https://clojuredocs.org/clojure_core/clojure.string/index-of"
"map-indexed"  "https://clojuredocs.org/clojure_core/clojure.core/map-indexed"
"macroexpand-1"  "https://clojuredocs.org/clojure_core/clojure.core/macroexpand-1"
"triml"  "https://clojuredocs.org/clojure_core/clojure.string/triml"
"unreduced"  "https://clojuredocs.org/clojure_core/clojure.core/unreduced"
"thread-bound?"  "https://clojuredocs.org/clojure_core/clojure.core/thread-bound_q"
"split-at"  "https://clojuredocs.org/clojure_core/clojure.core/split-at"
"counted?"  "https://clojuredocs.org/clojure_core/clojure.core/counted_q"
"replace"  "https://clojuredocs.org/clojure_core/clojure.zip/replace"
"float?"  "https://clojuredocs.org/clojure_core/clojure.core/float_q"
"associative?"  "https://clojuredocs.org/clojure_core/clojure.core/associative_q"
"doubles"  "https://clojuredocs.org/clojure_core/clojure.core/doubles"
"rightmost"  "https://clojuredocs.org/clojure_core/clojure.zip/rightmost"
"proxy-mappings"  "https://clojuredocs.org/clojure_core/clojure.core/proxy-mappings"
"postwalk"  "https://clojuredocs.org/clojure_core/clojure.walk/postwalk"
"with-precision"  "https://clojuredocs.org/clojure_core/clojure.core/with-precision"
"cond"  "https://clojuredocs.org/clojure_core/clojure.core/cond"
"realized?"  "https://clojuredocs.org/clojure_core/clojure.core/realized_q"
"gen-class"  "https://clojuredocs.org/clojure_core/clojure.core/gen-class"
"sequence"  "https://clojuredocs.org/clojure_core/clojure.core/sequence"
"prewalk-demo"  "https://clojuredocs.org/clojure_core/clojure.walk/prewalk-demo"
"var-set"  "https://clojuredocs.org/clojure_core/clojure.core/var-set"
"insert-child"  "https://clojuredocs.org/clojure_core/clojure.zip/insert-child"
"blank?"  "https://clojuredocs.org/clojure_core/clojure.string/blank_q"
"if"  "https://clojuredocs.org/clojure_core/clojure.core/if"
"*unchecked-math*"  "https://clojuredocs.org/clojure_core/clojure.core/*unchecked-math*"
"read-line"  "https://clojuredocs.org/clojure_core/clojure.core/read-line"
"let"  "https://clojuredocs.org/clojure_core/clojure.core/let"
"sync"  "https://clojuredocs.org/clojure_core/clojure.core/sync"
"ratio?"  "https://clojuredocs.org/clojure_core/clojure.core/ratio_q"
"drop"  "https://clojuredocs.org/clojure_core/clojure.core/drop"
"load-string"  "https://clojuredocs.org/clojure_core/clojure.core/load-string"
"construct-proxy"  "https://clojuredocs.org/clojure_core/clojure.core/construct-proxy"
"unchecked-inc"  "https://clojuredocs.org/clojure_core/clojure.core/unchecked-inc"
"reify"  "https://clojuredocs.org/clojure_core/clojure.core/reify"
"vals"  "https://clojuredocs.org/clojure_core/clojure.core/vals"
"import"  "https://clojuredocs.org/clojure_core/clojure.core/import"
"edit"  "https://clojuredocs.org/clojure_core/clojure.zip/edit"
"aset-int"  "https://clojuredocs.org/clojure_core/clojure.core/aset-int"
"inc"  "https://clojuredocs.org/clojure_core/clojure.core/inc"
"sort-by"  "https://clojuredocs.org/clojure_core/clojure.core/sort-by"
"defmulti"  "https://clojuredocs.org/clojure_core/clojure.core/defmulti"
"when-let"  "https://clojuredocs.org/clojure_core/clojure.core/when-let"
"eval"  "https://clojuredocs.org/clojure_core/clojure.core/eval"
"println"  "https://clojuredocs.org/clojure_core/clojure.core/println"
"ex-info"  "https://clojuredocs.org/clojure_core/clojure.core/ex-info"
"ns-unmap"  "https://clojuredocs.org/clojure_core/clojure.core/ns-unmap"
"definterface"  "https://clojuredocs.org/clojure_core/clojure.core/definterface"
"char"  "https://clojuredocs.org/clojure_core/clojure.core/char"
"not="  "https://clojuredocs.org/clojure_core/clojure.core/not="
"doto"  "https://clojuredocs.org/clojure_core/clojure.core/doto"
"short-array"  "https://clojuredocs.org/clojure_core/clojure.core/short-array"
"rights"  "https://clojuredocs.org/clojure_core/clojure.zip/rights"
"slurp"  "https://clojuredocs.org/clojure_core/clojure.core/slurp"
"*ns*"  "https://clojuredocs.org/clojure_core/clojure.core/*ns*"
"atom"  "https://clojuredocs.org/clojure_core/clojure.core/atom"
"vector"  "https://github.com/clojure/core.rrb-vector"
"capitalize"  "https://clojuredocs.org/clojure_core/clojure.string/capitalize"
"spit"  "https://clojuredocs.org/clojure_core/clojure.core/spit"
"if-some"  "https://clojuredocs.org/clojure_core/clojure.core/if-some"
"take-while"  "https://clojuredocs.org/clojure_core/clojure.core/take-while"
"select"  "https://clojuredocs.org/clojure_core/clojure.set/select"
"extend-protocol"  "https://clojuredocs.org/clojure_core/clojure.core/extend-protocol"
"or"  "https://clojuredocs.org/clojure_core/clojure.core/or"
"identity"  "https://clojuredocs.org/clojure_core/clojure.core/identity"
"list?"  "https://clojuredocs.org/clojure_core/clojure.core/list_q"
"odd?"  "https://clojuredocs.org/clojure_core/clojure.core/odd_q"
"prev"  "https://clojuredocs.org/clojure_core/clojure.zip/prev"
"case"  "https://clojuredocs.org/clojure_core/clojure.core/case"
"restart-agent"  "https://clojuredocs.org/clojure_core/clojure.core/restart-agent"
"agent-error"  "https://clojuredocs.org/clojure_core/clojure.core/agent-error"
"int-array"  "https://clojuredocs.org/clojure_core/clojure.core/int-array"
"locking"  "https://clojuredocs.org/clojure_core/clojure.core/locking"
"keyword?"  "https://clojuredocs.org/clojure_core/clojure.core/keyword_q"
"split"  "https://clojuredocs.org/clojure_core/clojure.string/split"
"future-cancelled?"  "https://clojuredocs.org/clojure_core/clojure.core/future-cancelled_q"
"keyword"  "https://clojuredocs.org/clojure_core/clojure.core/keyword"
"pr-str"  "https://clojuredocs.org/clojure_core/clojure.core/pr-str"
"remove"  "https://clojuredocs.org/clojure_core/clojure.zip/remove"
"ns-aliases"  "https://clojuredocs.org/clojure_core/clojure.core/ns-aliases"
"interleave"  "https://clojuredocs.org/clojure_core/clojure.core/interleave"
"prewalk-replace"  "https://clojuredocs.org/clojure_core/clojure.walk/prewalk-replace"
"map?"  "https://clojuredocs.org/clojure_core/clojure.core/map_q"
"bit-not"  "https://clojuredocs.org/clojure_core/clojure.core/bit-not"
"rand-nth"  "https://clojuredocs.org/clojure_core/clojure.core/rand-nth"
"ints"  "https://clojuredocs.org/clojure_core/clojure.core/ints"
"walk"  "https://clojuredocs.org/clojure_core/clojure.walk/walk"
"priority-map"  "https://github.com/clojure/data.priority-map"
"lazy-seq"  "https://clojuredocs.org/clojure_core/clojure.core/lazy-seq"
"partition-all"  "https://clojuredocs.org/clojure_core/clojure.core/partition-all"
"mapcat"  "https://clojuredocs.org/clojure_core/clojure.core/mapcat"
"map-entry?"  "https://clojuredocs.org/clojure_core/clojure.core/map-entry_q"
"get-method"  "https://clojuredocs.org/clojure_core/clojure.core/get-method"
">="  "https://clojuredocs.org/clojure_core/clojure.core/>="
"*err*"  "https://clojuredocs.org/clojure_core/clojure.core/*err*"
"biginteger"  "https://clojuredocs.org/clojure_core/clojure.core/biginteger"
"bean"  "https://clojuredocs.org/clojure_core/clojure.core/bean"
"ns-unalias"  "https://clojuredocs.org/clojure_core/clojure.core/ns-unalias"
"bytes"  "https://clojuredocs.org/clojure_core/clojure.core/bytes"
"with-open"  "https://clojuredocs.org/clojure_core/clojure.core/with-open"
"ref-set"  "https://clojuredocs.org/clojure_core/clojure.core/ref-set"
"prn"  "https://clojuredocs.org/clojure_core/clojure.core/prn"
"dir"  "https://clojuredocs.org/clojure_core/clojure.repl/dir"
"concat"  "https://clojuredocs.org/clojure_core/clojure.core/concat"
"filter"  "https://clojuredocs.org/clojure_core/clojure.core/filter"
"take-last"  "https://clojuredocs.org/clojure_core/clojure.core/take-last"
"sorted-set-by"  "https://github.com/clojure/data.avl"
"symbol"  "https://clojuredocs.org/clojure_core/clojure.core/symbol"
"time"  "https://clojuredocs.org/clojure_core/clojure.core/time"
"empty"  "https://clojuredocs.org/clojure_core/clojure.core/empty"
"condp"  "https://clojuredocs.org/clojure_core/clojure.core/condp"
"unsigned-bit-shift-right"  "https://clojuredocs.org/clojure_core/clojure.core/unsigned-bit-shift-right"
"intersection"  "https://clojuredocs.org/clojure_core/clojure.set/intersection"
"comparator"  "https://clojuredocs.org/clojure_core/clojure.core/comparator"
"complement"  "https://clojuredocs.org/clojure_core/clojure.core/complement"
"when"  "https://clojuredocs.org/clojure_core/clojure.core/when"
"vector-zip"  "https://clojuredocs.org/clojure_core/clojure.zip/vector-zip"
"insert-left"  "https://clojuredocs.org/clojure_core/clojure.zip/insert-left"
"line-seq"  "https://clojuredocs.org/clojure_core/clojure.core/line-seq"
"int-map"  "https://github.com/clojure/data.int-map"
"xml-zip"  "https://clojuredocs.org/clojure_core/clojure.zip/xml-zip"
"bound-fn*"  "https://clojuredocs.org/clojure_core/clojure.core/bound-fn*"
"symbol?"  "https://clojuredocs.org/clojure_core/clojure.core/symbol_q"
"compile"  "https://clojuredocs.org/clojure_core/clojure.core/compile"
"load-file"  "https://clojuredocs.org/clojure_core/clojure.core/load-file"
"every-pred"  "https://clojuredocs.org/clojure_core/clojure.core/every-pred"
"subseq"  "https://clojuredocs.org/clojure_core/clojure.core/subseq"
"reset!"  "https://clojuredocs.org/clojure_core/clojure.core/reset!"
"all-ns"  "https://clojuredocs.org/clojure_core/clojure.core/all-ns"
"await-for"  "https://clojuredocs.org/clojure_core/clojure.core/await-for"
"writer"  "https://clojuredocs.org/clojure_core/clojure.java.io/writer"
"neg?"  "https://clojuredocs.org/clojure_core/clojure.core/neg_q"
"postwalk-replace"  "https://clojuredocs.org/clojure_core/clojure.walk/postwalk-replace"
"string?"  "https://clojuredocs.org/clojure_core/clojure.core/string_q"
"sorted?"  "https://clojuredocs.org/clojure_core/clojure.core/sorted_q"
"->"  "https://clojuredocs.org/clojure_core/clojure.core/->"
"set-validator!"  "https://clojuredocs.org/clojure_core/clojure.core/set-validator!"
"and"  "https://clojuredocs.org/clojure_core/clojure.core/and"
"hash-set"  "https://clojuredocs.org/clojure_core/clojure.core/hash-set"
"set?"  "https://clojuredocs.org/clojure_core/clojure.core/set_q"
"defmethod"  "https://clojuredocs.org/clojure_core/clojure.core/defmethod"
"group-by"  "https://clojuredocs.org/clojure_core/clojure.core/group-by"
"dec'"  "https://clojuredocs.org/clojure_core/clojure.core/dec'"
"deref"  "https://clojuredocs.org/clojure_core/clojure.core/deref"
"mod"  "https://clojuredocs.org/clojure_core/clojure.core/mod"
"do"  "https://clojuredocs.org/clojure_core/clojure.core/do"
"some->>"  "https://clojuredocs.org/clojure_core/clojure.core/some->>"
"not-empty"  "https://clojuredocs.org/clojure_core/clojure.core/not-empty"
"last"  "https://clojuredocs.org/clojure_core/clojure.core/last"
"send-via"  "https://clojuredocs.org/clojure_core/clojure.core/send-via"
"delay"  "https://clojuredocs.org/clojure_core/clojure.core/delay"
"interpose"  "https://clojuredocs.org/clojure_core/clojure.core/interpose"
"source"  "https://clojuredocs.org/clojure_core/clojure.repl/source"
"<"  "https://clojuredocs.org/clojure_core/clojure.core/<"
"intern"  "https://clojuredocs.org/clojure_core/clojure.core/intern"
"pos?"  "https://clojuredocs.org/clojure_core/clojure.core/pos_q"
"aset-boolean"  "https://clojuredocs.org/clojure_core/clojure.core/aset-boolean"
"set-agent-send-executor!"  "https://clojuredocs.org/clojure_core/clojure.core/set-agent-send-executor!"
"down"  "https://clojuredocs.org/clojure_core/clojure.zip/down"
"type"  "https://clojuredocs.org/clojure_core/clojure.core/type"
"bound?"  "https://clojuredocs.org/clojure_core/clojure.core/bound_q"
"print-str"  "https://clojuredocs.org/clojure_core/clojure.core/print-str"
"min-key"  "https://clojuredocs.org/clojure_core/clojure.core/min-key"
"alength"  "https://clojuredocs.org/clojure_core/clojure.core/alength"
"make-array"  "https://clojuredocs.org/clojure_core/clojure.core/make-array"
"extends?"  "https://clojuredocs.org/clojure_core/clojure.core/extends_q"
"future-done?"  "https://clojuredocs.org/clojure_core/clojure.core/future-done_q"
"alter-meta!"  "https://clojuredocs.org/clojure_core/clojure.core/alter-meta!"
"get-proxy-class"  "https://clojuredocs.org/clojure_core/clojure.core/get-proxy-class"
"browse-url"  "https://clojuredocs.org/clojure_core/clojure.java.browse/browse-url"
"conj"  "https://clojuredocs.org/clojure_core/clojure.core/conj"
"loaded-libs"  "https://clojuredocs.org/clojure_core/clojure.core/loaded-libs"
"*file*"  "https://clojuredocs.org/clojure_core/clojure.core/*file*"
"prewalk"  "https://clojuredocs.org/clojure_core/clojure.walk/prewalk"
"ordered-map"  "https://github.com/amalloy/ordered"
"ref"  "https://clojuredocs.org/clojure_core/clojure.core/ref"
"double"  "https://clojuredocs.org/clojure_core/clojure.core/double"
"unchecked-multiply"  "https://clojuredocs.org/clojure_core/clojure.core/unchecked-multiply"
"print-table"  "https://clojuredocs.org/clojure_core/clojure.pprint/print-table"
"tree-seq"  "https://clojuredocs.org/clojure_core/clojure.core/tree-seq"
"meta"  "https://clojuredocs.org/clojure_core/clojure.core/meta"
"defonce"  "https://clojuredocs.org/clojure_core/clojure.core/defonce"
"join"  "https://clojuredocs.org/clojure_core/clojure.set/join"
"upper-case"  "https://clojuredocs.org/clojure_core/clojure.string/upper-case"
"class?"  "https://clojuredocs.org/clojure_core/clojure.core/class_q"
"aset-short"  "https://clojuredocs.org/clojure_core/clojure.core/aset-short"
"char-name-string"  "https://clojuredocs.org/clojure_core/clojure.core/char-name-string"
"extend"  "https://clojuredocs.org/clojure_core/clojure.core/extend"
"shutdown-agents"  "https://clojuredocs.org/clojure_core/clojure.core/shutdown-agents"
"while"  "https://clojuredocs.org/clojure_core/clojure.core/while"
"floats"  "https://clojuredocs.org/clojure_core/clojure.core/floats"
"reset-meta!"  "https://clojuredocs.org/clojure_core/clojure.core/reset-meta!"
"bit-shift-right"  "https://clojuredocs.org/clojure_core/clojure.core/bit-shift-right"
"macroexpand-all"  "https://clojuredocs.org/clojure_core/clojure.walk/macroexpand-all"
"->>"  "https://clojuredocs.org/clojure_core/clojure.core/->>"
"print"  "https://clojuredocs.org/clojure_core/clojure.core/print"
"*print-length*"  "https://clojuredocs.org/clojure_core/clojure.core/*print-length*"
"instance?"  "https://clojuredocs.org/clojure_core/clojure.core/instance_q"
"volatile!"  "https://clojuredocs.org/clojure_core/clojure.core/volatile!"
"quote"  "https://clojuredocs.org/clojure_core/clojure.core/quote"
"memoize"  "https://clojuredocs.org/clojure_core/clojure.core/memoize"
"array-map"  "https://clojuredocs.org/clojure_core/clojure.core/array-map"
"defprotocol"  "https://clojuredocs.org/clojure_core/clojure.core/defprotocol"
"add-watch"  "https://clojuredocs.org/clojure_core/clojure.core/add-watch"
"zero?"  "https://clojuredocs.org/clojure_core/clojure.core/zero_q"
"extend-type"  "https://clojuredocs.org/clojure_core/clojure.core/extend-type"
"make-hierarchy"  "https://clojuredocs.org/clojure_core/clojure.core/make-hierarchy"
"defn-"  "https://clojuredocs.org/clojure_core/clojure.core/defn-"
"file"  "https://clojuredocs.org/clojure_core/clojure.java.io/file"
"aset-long"  "https://clojuredocs.org/clojure_core/clojure.core/aset-long"
"alias"  "https://clojuredocs.org/clojure_core/clojure.core/alias"
"set"  "https://clojuredocs.org/clojure_core/clojure.core/set"
"double-array"  "https://clojuredocs.org/clojure_core/clojure.core/double-array"
"*3"  "https://clojuredocs.org/clojure_core/clojure.core/*3"
"postwalk-demo"  "https://clojuredocs.org/clojure_core/clojure.walk/postwalk-demo"
"num"  "https://clojuredocs.org/clojure_core/clojure.core/num"
"end?"  "https://clojuredocs.org/clojure_core/clojure.zip/end_q"
"some"  "https://clojuredocs.org/clojure_core/clojure.core/some"
"sh"  "https://clojuredocs.org/clojure_core/clojure.java.shell/sh"
"var?"  "https://clojuredocs.org/clojure_core/clojure.core/var_q"
"fn?"  "https://clojuredocs.org/clojure_core/clojure.core/fn_q"
"release-pending-sends"  "https://clojuredocs.org/clojure_core/clojure.core/release-pending-sends"
"macroexpand"  "https://clojuredocs.org/clojure_core/clojure.core/macroexpand"
"ns-interns"  "https://clojuredocs.org/clojure_core/clojure.core/ns-interns"
"aset"  "https://clojuredocs.org/clojure_core/clojure.core/aset"
"io!"  "https://clojuredocs.org/clojure_core/clojure.core/io!"
"char-array"  "https://clojuredocs.org/clojure_core/clojure.core/char-array"
"juxt"  "https://clojuredocs.org/clojure_core/clojure.core/juxt"
"seq?"  "https://clojuredocs.org/clojure_core/clojure.core/seq_q"
"as-relative-path"  "https://clojuredocs.org/clojure_core/clojure.java.io/as-relative-path"
"filterv"  "https://clojuredocs.org/clojure_core/clojure.core/filterv"
"bit-set"  "https://clojuredocs.org/clojure_core/clojure.core/bit-set"
"quot"  "https://clojuredocs.org/clojure_core/clojure.core/quot"
"deliver"  "https://clojuredocs.org/clojure_core/clojure.core/deliver"
"def"  "https://clojuredocs.org/clojure_core/clojure.core/def"
"includes?"  "https://clojuredocs.org/clojure_core/clojure.string/includes_q"
"ordering-map"  "https://github.com/amalloy/useful/blob/master/src/flatland/useful/map.clj#L243-L245"
"coll?"  "https://clojuredocs.org/clojure_core/clojure.core/coll_q"
"error-mode"  "https://clojuredocs.org/clojure_core/clojure.core/error-mode"
"reduce"  "https://clojuredocs.org/clojure_core/clojure.core/reduce"
"bit-shift-left"  "https://clojuredocs.org/clojure_core/clojure.core/bit-shift-left"
"*2"  "https://clojuredocs.org/clojure_core/clojure.core/*2"
"make-node"  "https://clojuredocs.org/clojure_core/clojure.zip/make-node"
"re-matches"  "https://clojuredocs.org/clojure_core/clojure.core/re-matches"
"apropos"  "https://clojuredocs.org/clojure_core/clojure.repl/apropos"
"flatten"  "https://clojuredocs.org/clojure_core/clojure.core/flatten"
"nnext"  "https://clojuredocs.org/clojure_core/clojure.core/nnext"
"ref-min-history"  "https://clojuredocs.org/clojure_core/clojure.core/ref-min-history"
"bit-clear"  "https://clojuredocs.org/clojure_core/clojure.core/bit-clear"
"ensure-reduced"  "https://clojuredocs.org/clojure_core/clojure.core/ensure-reduced"
"namespace"  "https://clojuredocs.org/clojure_core/clojure.core/namespace"
"repeatedly"  "https://clojuredocs.org/clojure_core/clojure.core/repeatedly"
"comment"  "https://clojuredocs.org/clojure_core/clojure.core/comment"
"recur"  "https://clojuredocs.org/clojure_core/clojure.core/recur"
"find-ns"  "https://clojuredocs.org/clojure_core/clojure.core/find-ns"
"dotimes"  "https://clojuredocs.org/clojure_core/clojure.core/dotimes"
"javadoc"  "https://clojuredocs.org/clojure_core/clojure.java.javadoc/javadoc"
"future"  "https://clojuredocs.org/clojure_core/clojure.core/future"
"*agent*"  "https://clojuredocs.org/clojure_core/clojure.core/*agent*"
"proxy"  "https://clojuredocs.org/clojure_core/clojure.core/proxy"
"branch?"  "https://clojuredocs.org/clojure_core/clojure.zip/branch_q"
"clojure.data/diff"  "https://clojuredocs.org/clojure_core/clojure.data/diff"
"nfirst"  "https://clojuredocs.org/clojure_core/clojure.core/nfirst"
"get-thread-bindings"  "https://clojuredocs.org/clojure_core/clojure.core/get-thread-bindings"
"prefer-method"  "https://clojuredocs.org/clojure_core/clojure.core/prefer-method"
"*compile-files*"  "https://clojuredocs.org/clojure_core/clojure.core/*compile-files*"
"ns-map"  "https://clojuredocs.org/clojure_core/clojure.core/ns-map"
"bigint"  "https://clojuredocs.org/clojure_core/clojure.core/bigint"
"assoc-in"  "https://clojuredocs.org/clojure_core/clojure.core/assoc-in"
"assoc"  "https://clojuredocs.org/clojure_core/clojure.core/assoc"
"mapv"  "https://clojuredocs.org/clojure_core/clojure.core/mapv"
"into"  "https://clojuredocs.org/clojure_core/clojure.core/into"
"var-get"  "https://clojuredocs.org/clojure_core/clojure.core/var-get"
"when-not"  "https://clojuredocs.org/clojure_core/clojure.core/when-not"
"aset-double"  "https://clojuredocs.org/clojure_core/clojure.core/aset-double"
"dec"  "https://clojuredocs.org/clojure_core/clojure.core/dec"
"trim-newline"  "https://clojuredocs.org/clojure_core/clojure.string/trim-newline"
"disj"  "https://clojuredocs.org/clojure_core/clojure.core/disj"
"use"  "https://clojuredocs.org/clojure_core/clojure.core/use"
"difference"  "https://clojuredocs.org/clojure_core/clojure.set/difference"
"init-proxy"  "https://clojuredocs.org/clojure_core/clojure.core/init-proxy"
"=="  "https://clojuredocs.org/clojure_core/clojure.core/=="
"get"  "https://clojuredocs.org/clojure_core/clojure.core/get"
"distinct?"  "https://clojuredocs.org/clojure_core/clojure.core/distinct_q"
"merge"  "https://clojuredocs.org/clojure_core/clojure.core/merge"
"lefts"  "https://clojuredocs.org/clojure_core/clojure.zip/lefts"
"+"  "https://clojuredocs.org/clojure_core/clojure.core/+"
"list*"  "https://clojuredocs.org/clojure_core/clojure.core/list*"
"re-matcher"  "https://clojuredocs.org/clojure_core/clojure.core/re-matcher"
"even?"  "https://clojuredocs.org/clojure_core/clojure.core/even_q"
"decimal?"  "https://clojuredocs.org/clojure_core/clojure.core/decimal_q"
"cond->>"  "https://clojuredocs.org/clojure_core/clojure.core/cond->>"
"rsubseq"  "https://clojuredocs.org/clojure_core/clojure.core/rsubseq"
"throw"  "https://clojuredocs.org/clojure_core/clojure.core/throw"
"with-sh-dir"  "https://clojuredocs.org/clojure_core/clojure.java.shell/with-sh-dir"
"cat"  "https://clojuredocs.org/clojure_core/clojure.core/cat"
"char?"  "https://clojuredocs.org/clojure_core/clojure.core/char_q"
"pr"  "https://clojuredocs.org/clojure_core/clojure.core/pr"
"commute"  "https://clojuredocs.org/clojure_core/clojure.core/commute"
"doc"  "https://clojuredocs.org/clojure_core/clojure.repl/doc"
"vreset!"  "https://clojuredocs.org/clojure_core/clojure.core/vreset!"
"reversible?"  "https://clojuredocs.org/clojure_core/clojure.core/reversible_q"
"left"  "https://clojuredocs.org/clojure_core/clojure.zip/left"
"assert"  "https://clojuredocs.org/clojure_core/clojure.core/assert"
"finally"  "https://clojuredocs.org/clojure_core/clojure.core/finally"
"byte"  "https://clojuredocs.org/clojure_core/clojure.core/byte"
"trimr"  "https://clojuredocs.org/clojure_core/clojure.string/trimr"
"prefers"  "https://clojuredocs.org/clojure_core/clojure.core/prefers"
"keep-indexed"  "https://clojuredocs.org/clojure_core/clojure.core/keep-indexed"
"letfn"  "https://clojuredocs.org/clojure_core/clojure.core/letfn"
"ref-history-count"  "https://clojuredocs.org/clojure_core/clojure.core/ref-history-count"
"node"  "https://clojuredocs.org/clojure_core/clojure.zip/node"
"set-error-mode!"  "https://clojuredocs.org/clojure_core/clojure.core/set-error-mode!"
"test"  "https://clojuredocs.org/clojure_core/clojure.core/test"
"format"  "https://clojuredocs.org/clojure_core/clojure.core/format"
"ns"  "https://clojuredocs.org/clojure_core/clojure.core/ns"
"cl-format"  "https://clojuredocs.org/clojure_core/clojure.pprint/cl-format"
"aset-char"  "https://clojuredocs.org/clojure_core/clojure.core/aset-char"
"future-cancel"  "https://clojuredocs.org/clojure_core/clojure.core/future-cancel"
"reduced?"  "https://clojuredocs.org/clojure_core/clojure.core/reduced_q"
"ffirst"  "https://clojuredocs.org/clojure_core/clojure.core/ffirst"
"remove-all-methods"  "https://clojuredocs.org/clojure_core/clojure.core/remove-all-methods"
"ns-refers"  "https://clojuredocs.org/clojure_core/clojure.core/ns-refers"
"first"  "https://clojuredocs.org/clojure_core/clojure.core/first"
"enumeration-seq"  "https://clojuredocs.org/clojure_core/clojure.core/enumeration-seq"
"val"  "https://clojuredocs.org/clojure_core/clojure.core/val"
"deftype"  "https://clojuredocs.org/clojure_core/clojure.core/deftype"
"defmacro"  "https://clojuredocs.org/clojure_core/clojure.core/defmacro"
"ex-data"  "https://clojuredocs.org/clojure_core/clojure.core/ex-data"
">"  "https://clojuredocs.org/clojure_core/clojure.core/>"
"monitor-exit"  "https://clojuredocs.org/clojure_core/clojure.core/monitor-exit"
"fnext"  "https://clojuredocs.org/clojure_core/clojure.core/fnext"
"with-out-str"  "https://clojuredocs.org/clojure_core/clojure.core/with-out-str"
"rationalize"  "https://clojuredocs.org/clojure_core/clojure.core/rationalize" 
})

(defn find-url [t]
  (get function-map t))

(defn handle-highlighted-text [t]
  (let [txt (aget t "data")
        function-url (find-url txt)
       ]
   (if function-url (redirect-to-cheatsheet function-url) (paste-value txt))
))
  
(defn current-tab
  "taken from https://github.com/marcelocra/chrome-extension-cljs-example/blob/master/src/chrome_extensions/background/events.cljs"
  [cb]
  (.query js/chrome.tabs
          #js {:active true :currentWindow true}
          (fn [tabs]
            (cb (first tabs)))))

(defn pasteSelection []
  (let [f1 (fn [tab] (.sendMessage js/chrome.tabs (aget tab "id") #js {:method "getSelection"} handle-highlighted-text))
       ]
  (current-tab f1)))

(set! (.-onload js/window) pasteSelection)
